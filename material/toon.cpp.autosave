#include "material/toon.h"
#include <assert.h>

void ToonMaterial::apply(unsigned int light_pass)
{

    prog_->bind();

    // globals
    prog_->setUniformValue("time", time);
    prog_->setUniformValue("ambientLightIntensity", ambientLightIntensity);


    assert(light_pass>=0 && light_pass<lights.size());
    prog_->setUniformValue("pointlight.position_WC", lights[light_pass].position_WC);
    prog_->setUniformValue("pointlight.intensity", lights[light_pass].color * lights[light_pass].intensity);
    prog_->setUniformValue("pointlight.attenuation", light_pass);

   
        prog_->uniform("cDots", cDots);
        prog_->uniform("cBack", cBack);
        prog_->uniform("outlineColor", glm::vec3(0.0f));
        prog_->uniform("dots", glm::int1(dots));
        prog_->uniform("radius", glm::float1(radius));
        prog_->uniform("ka", 0.1f);
        prog_->uniform("kd", 0.7f);
        prog_->uniform("ks", 1.0f);
        prog_->uniform("shininess", 50.0f);
        prog_->uniform("toon", toonShading);

    /*
    prog_->setUniformValue("toonMaterial.k_ambient", toon.k_ambient);
    prog_->setUniformValue("toonMaterial.k_diffuse", toon.k_diffuse);
    prog_->setUniformValue("toonMaterial.k_specular", toon.k_specular);
    prog_->setUniformValue("toonMaterial.shininess",  toon.shininess);
    prog_->setUniformValue("toonMaterial.as_toon",toon.as_toon );
*/
    // FIXME: rename parameter
    /*
    prog_->setUniformValue("toon.dots", lights[light_pass].position_WC);
    prog_->setUniformValue("toon.radius", lights[light_pass].position_WC);
    prog_->setUniformValue("toon.cDots", lights[light_pass].position_WC);
    prog_->setUniformValue("toon.cBack", lights[light_pass].position_WC);
    prog_->setUniformValue("toon.outlineColor", lights[light_pass].position_WC);
*/

}
